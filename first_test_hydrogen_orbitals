#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul  7 17:03:32 2021

@author: laurecazals
"""
import math
import numpy as np
import matplotlib.pyplot as plt
import scipy.special
from scipy.special import sph_harm
import random
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

#hydrogen wave function
def hydrogen_wf(n,l,m,X,Y,Z):
    R = np.sqrt(X**2+Y**2+Z**2)
    Theta = np.arccos(Z/R)
    Phi = np.arctan2(Y,X)
    
    rho = 2.*R/n
    s_harm=sph_harm(m, l, Phi, Theta)
    l_poly = scipy.special.genlaguerre(n-l-1,2*l+1)(rho)
    
    prefactor = np.sqrt((2./n)**3*math.factorial(n-l-1)/(2.*n*math.factorial(n+l)))
    wf = prefactor*np.exp(-rho/2.)*rho**l*s_harm*l_poly
    wf = np.nan_to_num(wf)
    return wf


# Choose the orbitals
n = 1
l = 0
m = 0


# Random particules

N = 30 # number of particules


#Probability of 1s
def prob_1s(x,y,z):
    r=np.sqrt(np.square(x)+np.square(y)+np.square(z))
    return np.square(np.exp(-r)/np.sqrt(np.pi))
#Random coordinates
x=np.linspace(0,1,N)
y=np.linspace(0,1,N)
z=np.linspace(0,1,N)
    
elements_x = []
elements_y = []
elements_z = []
probability = []

for ix in x:
    for iy in y:
        for iz in z:
            #Serialize into 1D object
            #elements.append(str((ix,iy,iz)))
            elements_x.append(ix)
            elements_y.append(iy)
            elements_z.append(iz)
            probability.append(prob_1s(ix,iy,iz))
            
#Ensure sum of probability is 1
probability = probability/sum(probability)


#Getting electron coordinates based on probabiliy
x_coords = np.random.choice(elements_x, size=100000, replace=True, p=probability)
y_coords = np.random.choice(elements_y, size=100000, replace=True, p=probability)
z_coords = np.random.choice(elements_z, size=100000, replace=True, p=probability)
    
#coupure

#Plotting
fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x_coords, y_coords, z_coords, alpha=0.05, s=2)
ax.set_title("Hydrogen 1s density")
plt.show()



#Plot : colors as a function of the prob



#one third


    
x_one_third = []
y_one_third = []
z_one_third = []

x_two_third = []
y_two_third = []
z_two_third = []

x_three_third = []
y_three_third = []
z_three_third = []
limit = 0.333

for i in range(len(x_coords)) : 
    if limit>x_coords[i]:
        if limit>y_coords[i]:
            if limit>z_coords[i]:
                x_one_third.append(x_coords[i])
                y_one_third.append(y_coords[i])
                z_one_third.append(z_coords[i])
    
for i in range(len(x_coords)) : 
    if 2*limit>x_coords[i]>limit:
        if 2*limit>y_coords[i]>limit:
            if 2*limit>z_coords[i]>limit:
                x_two_third.append(x_coords[i])
                y_two_third.append(y_coords[i])
                z_two_third.append(z_coords[i]) 
                
for i in range(len(x_coords)) : 
    if 3*limit>x_coords[i]>2*limit:
        if 3*limit>y_coords[i]>2*limit:
            if 3*limit>z_coords[i]>2*limit:
                x_three_third.append(x_coords[i])
                y_three_third.append(y_coords[i])
                z_three_third.append(z_coords[i]) 
    


#Plotting
                
fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x_one_third, y_one_third, z_one_third, alpha=0.05, s=2,color='r')
ax.scatter(x_two_third, y_two_third, z_two_third, alpha=0.05, s=2,color='b')
ax.scatter(x_three_third, y_three_third, z_three_third, alpha=0.05, s=2,color='g')
ax.set_title("Hydrogen 1s density")
plt.show()
