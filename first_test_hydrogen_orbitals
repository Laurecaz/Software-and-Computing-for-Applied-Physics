import numpy as np
import math
import matplotlib.pyplot as plt
import scipy.special
from scipy.special import sph_harm



#hydrogen wave function
def hydrogen_wf(n,l,m,X,Y,Z):
    R = np.sqrt(X**2+Y**2+Z**2)
    Theta = np.arccos(Z/R)
    Phi = np.arctan2(Y,X)
    
    rho = 2.*R/n
    s_harm=sph_harm(m, l, Phi, Theta)
    l_poly = scipy.special.genlaguerre(n-l-1,2*l+1)(rho)
    
    prefactor = np.sqrt((2./n)**3*math.factorial(n-l-1)/(2.*n*math.factorial(n+l)))
    wf = prefactor*np.exp(-rho/2.)*rho**l*s_harm*l_poly
    wf = np.nan_to_num(wf)
    return wf
  
dz=0.01
zmin=-10
zmax=10

x = np.arange(zmin,zmax,dz)
y = np.arange(zmin,zmax,dz)
z = np.arange(zmin,zmax,dz)


#Change these to change which orbital to plot
n=1
l=0
m=0

data = hydrogen_wf(n,l,m,x,y,z)
data = (abs(data)**2)/sum(abs(data)**2)



#Getting electron coordinates based on probability
x_coords = np.random.choice(x, size=100000, replace=True, p=data)
y_coords = np.random.choice(y, size=100000, replace=True, p=data)
z_coords = np.random.choice(z, size=100000, replace=True, p=data)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x_coords,y_coords,z_coords, alpha=0.05, s=2)



#distribution of probability

quarter = []
half = []
three_quarter = []
last_quarter = []

#rendre cette partie universelle en tenant compte d'un changement de zmin/zmax
for i in range(len(x_coords)):
    r = np.sqrt(x_coords[i]**2+y_coords[i]**2+z_coords[i]**2)
    if r<0.8 : #particules with a distance lower than 0.8 from the origin
        quarter.append(r)
    if 0.8<r<1.6 :
        half.append(r)
    if 1.6<r<2.4 :
        three_quarter.append(r)
    if r>2.4 :
        last_quarter.append(r)
