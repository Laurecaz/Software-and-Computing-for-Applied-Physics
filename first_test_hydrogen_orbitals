import numpy as np
import matplotlib.pyplot as plt
import scipy.special
from scipy.special import sph_harm
import math
from functions import hydrogen_wf


#choice of orbital
#print('What orbitals do you want to plot ? ')
n = 3#input('n = ')
l = 1#input('l = ')
m = 0#input('m = ')

#construction of arbitrary coordinates grid
dz=0.01
zmin=-10
zmax=10
x = np.arange(zmin,zmax,dz)
y = np.arange(zmin,zmax,dz)
z = np.arange(zmin,zmax,dz)

#Calculation of the probability 
data = hydrogen_wf(n,l,m,x,y,z) 
data = (abs(data)**2)/sum(abs(data)**2)

#Getting electron coordinates based on the probability shape
x_coords = np.random.choice(x, size=100000, replace=True, p=data)
y_coords = np.random.choice(y, size=100000, replace=True, p=data)
z_coords = np.random.choice(z, size=100000, replace=True, p=data)

#DISTRIBUTION OF PROBABILITY : color code for different probability of presence of electrons

#First, define the max distance from the center i.e. the limit
def maximum_3array(a,b,c): #function which calculate the maximum value in a numpy array
    maximum = max(a)
    if maximum < max(b):
        maximum = max(b)
    if maximum < max(c):
        maximum = max(c)
    return maximum #TEST NEEDED

#definition of boundaries
quarter = 0.25*maximum_3array(x_coords,y_coords,z_coords)
half = 0.5*maximum_3array(x_coords,y_coords,z_coords)
three_quarter = 0.75*maximum_3array(x_coords,y_coords,z_coords)
maximum = maximum_3array(x_coords,y_coords,z_coords)

#then repartition
def separate_data_by_probability(lim_min,lim_max,x,y,z): #function which separate coordinates according to the distance with the origin
    x_reduc = []
    y_reduc = []
    z_reduc = []
    for i in range(len(x)):
        r = np.sqrt(x[i]**2+y[i]**2+z[i]**2)
        if lim_min < r < lim_max :
            x_reduc.append(x[i])
            y_reduc.append(y[i])
            z_reduc.append(z[i])
    return x_reduc, y_reduc, z_reduc


#repartition of the data
coord_quarter = separate_data_by_probability(0,quarter,x_coords,y_coords,z_coords)
coord_half = separate_data_by_probability(quarter,half,x_coords,y_coords,z_coords)
coord_three_quarter = separate_data_by_probability(half,three_quarter,x_coords,y_coords,z_coords)
coord_last_quarter = separate_data_by_probability(three_quarter,maximum,x_coords,y_coords,z_coords)

#plotting
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(coord_quarter[0],coord_quarter[1],coord_quarter[2], alpha=0.05, s=2,color='r',label = '75%') 
ax.scatter(coord_half[0],coord_half[1],coord_half[2], alpha=0.05, s=2,color='g',label='25%')
ax.scatter(coord_three_quarter[0],coord_three_quarter[1],coord_three_quarter[2], alpha=0.05, s=2,color='m',label='2%')
ax.scatter(coord_last_quarter[0],coord_last_quarter[1],coord_last_quarter[2], alpha=0.05, s=2,color='b',label ='0.1%')
plt.legend()



